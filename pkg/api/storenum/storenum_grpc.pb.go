// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/storenum/storenum.proto

package storenum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorenumClient is the client API for Storenum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorenumClient interface {
	CurrentNumber(ctx context.Context, in *CurrentNumberRequest, opts ...grpc.CallOption) (*CurrentNumberResponse, error)
	AddNumber(ctx context.Context, in *AddNumberRequest, opts ...grpc.CallOption) (*AddNumberResponse, error)
	SetNumber(ctx context.Context, in *SetNumberRequest, opts ...grpc.CallOption) (*SetNumberResponse, error)
}

type storenumClient struct {
	cc grpc.ClientConnInterface
}

func NewStorenumClient(cc grpc.ClientConnInterface) StorenumClient {
	return &storenumClient{cc}
}

func (c *storenumClient) CurrentNumber(ctx context.Context, in *CurrentNumberRequest, opts ...grpc.CallOption) (*CurrentNumberResponse, error) {
	out := new(CurrentNumberResponse)
	err := c.cc.Invoke(ctx, "/storenum.Storenum/currentNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storenumClient) AddNumber(ctx context.Context, in *AddNumberRequest, opts ...grpc.CallOption) (*AddNumberResponse, error) {
	out := new(AddNumberResponse)
	err := c.cc.Invoke(ctx, "/storenum.Storenum/addNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storenumClient) SetNumber(ctx context.Context, in *SetNumberRequest, opts ...grpc.CallOption) (*SetNumberResponse, error) {
	out := new(SetNumberResponse)
	err := c.cc.Invoke(ctx, "/storenum.Storenum/setNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorenumServer is the server API for Storenum service.
// All implementations must embed UnimplementedStorenumServer
// for forward compatibility
type StorenumServer interface {
	CurrentNumber(context.Context, *CurrentNumberRequest) (*CurrentNumberResponse, error)
	AddNumber(context.Context, *AddNumberRequest) (*AddNumberResponse, error)
	SetNumber(context.Context, *SetNumberRequest) (*SetNumberResponse, error)
	mustEmbedUnimplementedStorenumServer()
}

// UnimplementedStorenumServer must be embedded to have forward compatible implementations.
type UnimplementedStorenumServer struct {
}

func (UnimplementedStorenumServer) CurrentNumber(context.Context, *CurrentNumberRequest) (*CurrentNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentNumber not implemented")
}
func (UnimplementedStorenumServer) AddNumber(context.Context, *AddNumberRequest) (*AddNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNumber not implemented")
}
func (UnimplementedStorenumServer) SetNumber(context.Context, *SetNumberRequest) (*SetNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNumber not implemented")
}
func (UnimplementedStorenumServer) mustEmbedUnimplementedStorenumServer() {}

// UnsafeStorenumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorenumServer will
// result in compilation errors.
type UnsafeStorenumServer interface {
	mustEmbedUnimplementedStorenumServer()
}

func RegisterStorenumServer(s grpc.ServiceRegistrar, srv StorenumServer) {
	s.RegisterService(&Storenum_ServiceDesc, srv)
}

func _Storenum_CurrentNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorenumServer).CurrentNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storenum.Storenum/currentNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorenumServer).CurrentNumber(ctx, req.(*CurrentNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storenum_AddNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorenumServer).AddNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storenum.Storenum/addNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorenumServer).AddNumber(ctx, req.(*AddNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storenum_SetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorenumServer).SetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storenum.Storenum/setNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorenumServer).SetNumber(ctx, req.(*SetNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storenum_ServiceDesc is the grpc.ServiceDesc for Storenum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storenum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storenum.Storenum",
	HandlerType: (*StorenumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "currentNumber",
			Handler:    _Storenum_CurrentNumber_Handler,
		},
		{
			MethodName: "addNumber",
			Handler:    _Storenum_AddNumber_Handler,
		},
		{
			MethodName: "setNumber",
			Handler:    _Storenum_SetNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/storenum/storenum.proto",
}
